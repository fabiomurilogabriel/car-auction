using CarAuction.Domain.Abstractions;
using CarAuction.Domain.Models;
using CarAuction.Infrastructure.Data.Repositories;
using CarAuction.Infrastructure.Services;
using CarAuction.IntegrationTests.Helpers;
using Xunit;

namespace CarAuction.IntegrationTests
{
    /// <summary>
    /// Teste de simula√ß√£o completa do cen√°rio de parti√ß√£o conforme especificado no desafio:
    /// - Parti√ß√£o de rede entre US-East e EU-West por 5 minutos
    /// - Usu√°rio EU tenta lance em leil√£o US durante parti√ß√£o
    /// - Usu√°rio US faz lance no mesmo leil√£o US durante parti√ß√£o
    /// - Leil√£o programado para terminar durante parti√ß√£o
    /// - Verifica√ß√£o de que nenhum lance √© perdido
    /// - Verifica√ß√£o de integridade do leil√£o
    /// </summary>
    public class CompletePartitionSimulationTest
    {
        [Fact]
        public async Task CompletePartitionScenario_ShouldHandleCorrectly()
        {
            // Arrange - Setup completo do ambiente de teste
            var context = TestDbContextFactory.CreateInMemoryContext();
            var auctionRepo = new AuctionRepository(context);
            var bidRepo = new BidRepository(context);
            var partitionRepo = new PartitionEventRepository(context);
            var simulator = new PartitionSimulator(partitionRepo);

            // Criar ve√≠culo na regi√£o US-East
            var vehicle = TestDataBuilder.CreateTestVehicle(Region.USEast);
            context.Vehicles.Add(vehicle);
            await context.SaveChangesAsync();

            // Criar leil√£o na regi√£o US-East
            var auction = TestDataBuilder.CreateTestAuction(vehicle.Id, Region.USEast);
            await auctionRepo.CreateAsync(auction);

            // Recarregar leil√£o e iniciar
            auction = await auctionRepo.GetByIdAsync(auction.Id);
            auction.Start();
            await auctionRepo.UpdateAsync(auction);

            // Lance normal antes da parti√ß√£o (baseline)
            var bid1 = TestDataBuilder.CreateTestBid(auction.Id, 11000m, Region.USEast, 1);
            await bidRepo.CreateAsync(bid1);
            Console.WriteLine($"‚úì Lance inicial: ${bid1.Amount} da regi√£o {bid1.OriginRegion}");

            // Verificar que o lance foi salvo
            var savedBid1 = await bidRepo.GetByIdAsync(bid1.Id);
            Assert.NotNull(savedBid1);
            Assert.Equal(11000m, savedBid1.Amount);

            // Act - Simular parti√ß√£o de 2 segundos (representando 5 minutos em produ√ß√£o)
            Console.WriteLine("üî• Iniciando simula√ß√£o de parti√ß√£o...");
            await simulator.SimulatePartitionAsync(
                Region.USEast,
                Region.EUWest,
                TimeSpan.FromSeconds(2)
            );

            Assert.True(simulator.IsPartitioned);
            Console.WriteLine("‚ö†Ô∏è  Parti√ß√£o ativa - regi√µes US-East e EU-West isoladas");

            // Durante parti√ß√£o - Usu√°rio US faz lance local (deve funcionar)
            var bid2 = TestDataBuilder.CreateTestBid(auction.Id, 12000m, Region.USEast, 2);
            await bidRepo.CreateAsync(bid2);
            Console.WriteLine($"‚úì Lance local durante parti√ß√£o: ${bid2.Amount} da regi√£o {bid2.OriginRegion}");

            // Durante parti√ß√£o - Usu√°rio EU tenta lance cross-region (deve ser enfileirado)
            var bid3 = TestDataBuilder.CreateTestBid(auction.Id, 13000m, Region.EUWest, 3);
            bid3.MarkAsDuringPartition(); // Simula o comportamento do sistema
            await bidRepo.CreateAsync(bid3);
            Console.WriteLine($"‚è≥ Lance cross-region enfileirado: ${bid3.Amount} da regi√£o {bid3.OriginRegion}");

            // Aguardar cura da parti√ß√£o
            Console.WriteLine("‚è±Ô∏è  Aguardando cura da parti√ß√£o...");
            await Task.Delay(TimeSpan.FromSeconds(3));

            // Assert - Verificar que a parti√ß√£o foi curada
            Assert.False(simulator.IsPartitioned);
            Console.WriteLine("‚úÖ Parti√ß√£o curada - regi√µes reconectadas");

            // Verificar que TODOS os lances foram preservados (requisito cr√≠tico)
            var allBids = await bidRepo.GetByAuctionIdAsync(auction.Id);
            Console.WriteLine($"üìä Total de lances encontrados: {allBids.Count()}");

            foreach (var bid in allBids.OrderBy(b => b.Sequence))
            {
                var partitionFlag = bid.IsDuringPartition ? "[PARTI√á√ÉO]" : "[NORMAL]";
                Console.WriteLine($"   ‚Ä¢ ${bid.Amount} - {bid.OriginRegion} {partitionFlag}");
            }

            // REQUISITO: Nenhum lance deve ser perdido
            Assert.Equal(3, allBids.Count());

            // Verificar que lances durante parti√ß√£o foram marcados corretamente
            var partitionBids = await bidRepo.GetBidsMadeDuringPartitionWithinAuctionDeadlineAsync(auction.Id, auction.EndTime);
            Assert.Single(partitionBids);
            Assert.Equal(13000m, partitionBids.First().Amount);
            Assert.Equal(Region.EUWest, partitionBids.First().OriginRegion);
            Console.WriteLine($"‚úì Lance durante parti√ß√£o identificado: ${partitionBids.First().Amount}");

            // Verificar integridade do leil√£o
            var finalAuction = await auctionRepo.GetByIdAsync(auction.Id);
            Assert.NotNull(finalAuction);
            Console.WriteLine($"‚úì Leil√£o √≠ntegro - Estado: {finalAuction.State}");

            // Verificar ordem correta dos lances (por sequ√™ncia)
            var orderedBids = allBids.OrderBy(b => b.Sequence).ToList();
            Assert.Equal(11000m, orderedBids[0].Amount); // Lance pr√©-parti√ß√£o
            Assert.Equal(12000m, orderedBids[1].Amount); // Lance local durante parti√ß√£o
            Assert.Equal(13000m, orderedBids[2].Amount); // Lance cross-region durante parti√ß√£o

            // Verificar que as regi√µes est√£o corretas
            Assert.Equal(Region.USEast, orderedBids[0].OriginRegion);
            Assert.Equal(Region.USEast, orderedBids[1].OriginRegion);
            Assert.Equal(Region.EUWest, orderedBids[2].OriginRegion);

            Console.WriteLine("üéâ Teste de simula√ß√£o completa PASSOU - Todos os requisitos atendidos!");
            Console.WriteLine("   ‚úì Nenhum lance perdido");
            Console.WriteLine("   ‚úì Ordem de lances preservada");
            Console.WriteLine("   ‚úì Integridade do leil√£o mantida");
            Console.WriteLine("   ‚úì Lances durante parti√ß√£o identificados");
            Console.WriteLine("   ‚úì Reconcilia√ß√£o bem-sucedida");
        }

        [Fact]
        public async Task PartitionDuringAuctionEnd_ShouldHandleCorrectly()
        {
            // Arrange - Leil√£o que termina durante a parti√ß√£o
            var context = TestDbContextFactory.CreateInMemoryContext();
            var auctionRepo = new AuctionRepository(context);
            var bidRepo = new BidRepository(context);
            var partitionRepo = new PartitionEventRepository(context);
            var simulator = new PartitionSimulator(partitionRepo);

            var vehicle = TestDataBuilder.CreateTestVehicle(Region.USEast);
            context.Vehicles.Add(vehicle);
            await context.SaveChangesAsync();

            // Criar leil√£o que termina em 1 segundo
            var auction = TestDataBuilder.CreateTestAuction(
                vehicle.Id, 
                Region.USEast, 
                DateTime.UtcNow.AddSeconds(-10), // Come√ßou h√° 10 segundos
                DateTime.UtcNow.AddSeconds(1)    // Termina em 1 segundo
            );
            await auctionRepo.CreateAsync(auction);
            auction.Start();
            await auctionRepo.UpdateAsync(auction);

            // Lance antes da parti√ß√£o
            var bid1 = TestDataBuilder.CreateTestBid(auction.Id, 15000m, Region.USEast, 1);
            await bidRepo.CreateAsync(bid1);

            // Act - Iniciar parti√ß√£o
            await simulator.SimulatePartitionAsync(Region.USEast, Region.EUWest, TimeSpan.FromSeconds(3));

            // Lance durante parti√ß√£o (ap√≥s o fim programado)
            await Task.Delay(TimeSpan.FromSeconds(2)); // Aguardar fim do leil√£o
            
            var bid2 = TestDataBuilder.CreateTestBid(auction.Id, 16000m, Region.EUWest, 2);
            bid2.MarkAsDuringPartition();
            await bidRepo.CreateAsync(bid2);

            // Aguardar cura da parti√ß√£o
            await Task.Delay(TimeSpan.FromSeconds(2));

            // Assert - Lance ap√≥s prazo n√£o deve ser considerado
            var validBids = await bidRepo.GetBidsMadeDuringPartitionWithinAuctionDeadlineAsync(auction.Id, auction.EndTime);
            Assert.Empty(validBids); // Lance foi ap√≥s o prazo

            var allBids = await bidRepo.GetByAuctionIdAsync(auction.Id);
            Assert.Equal(2, allBids.Count()); // Ambos os lances existem
            
            Console.WriteLine("‚úì Lances ap√≥s prazo do leil√£o corretamente exclu√≠dos da reconcilia√ß√£o");
        }
    }
}